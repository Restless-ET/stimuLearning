<?php

/**
 * BaseOperator
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property integer $starting_market_size
 * @property decimal $balance
 * @property decimal $net_present_value
 * @property float $market_share
 * @property integer $payback_period
 * @property float $internal_rate_of_return
 * @property integer $user_id
 * @property integer $scenario_id
 * @property User $User
 * @property Scenario $Scenario
 * @property Doctrine_Collection $DecisionPoints
 * @property Doctrine_Collection $Ticks
 * 
 * @method string              getName()                    Returns the current record's "name" value
 * @method integer             getStartingMarketSize()      Returns the current record's "starting_market_size" value
 * @method decimal             getBalance()                 Returns the current record's "balance" value
 * @method decimal             getNetPresentValue()         Returns the current record's "net_present_value" value
 * @method float               getMarketShare()             Returns the current record's "market_share" value
 * @method integer             getPaybackPeriod()           Returns the current record's "payback_period" value
 * @method float               getInternalRateOfReturn()    Returns the current record's "internal_rate_of_return" value
 * @method integer             getUserId()                  Returns the current record's "user_id" value
 * @method integer             getScenarioId()              Returns the current record's "scenario_id" value
 * @method User                getUser()                    Returns the current record's "User" value
 * @method Scenario            getScenario()                Returns the current record's "Scenario" value
 * @method Doctrine_Collection getDecisionPoints()          Returns the current record's "DecisionPoints" collection
 * @method Doctrine_Collection getTicks()                   Returns the current record's "Ticks" collection
 * @method Operator            setName()                    Sets the current record's "name" value
 * @method Operator            setStartingMarketSize()      Sets the current record's "starting_market_size" value
 * @method Operator            setBalance()                 Sets the current record's "balance" value
 * @method Operator            setNetPresentValue()         Sets the current record's "net_present_value" value
 * @method Operator            setMarketShare()             Sets the current record's "market_share" value
 * @method Operator            setPaybackPeriod()           Sets the current record's "payback_period" value
 * @method Operator            setInternalRateOfReturn()    Sets the current record's "internal_rate_of_return" value
 * @method Operator            setUserId()                  Sets the current record's "user_id" value
 * @method Operator            setScenarioId()              Sets the current record's "scenario_id" value
 * @method Operator            setUser()                    Sets the current record's "User" value
 * @method Operator            setScenario()                Sets the current record's "Scenario" value
 * @method Operator            setDecisionPoints()          Sets the current record's "DecisionPoints" collection
 * @method Operator            setTicks()                   Sets the current record's "Ticks" collection
 * 
 * @package    stimuLearning
 * @subpackage model
 * @author     Artur Melo <adsmelo@ua.pt>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseOperator extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('operator');
        $this->hasColumn('name', 'string', 150, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 150,
             ));
        $this->hasColumn('starting_market_size', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('balance', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             ));
        $this->hasColumn('net_present_value', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             ));
        $this->hasColumn('market_share', 'float', null, array(
             'type' => 'float',
             'notnull' => true,
             ));
        $this->hasColumn('payback_period', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('internal_rate_of_return', 'float', null, array(
             'type' => 'float',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('scenario_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('Scenario', array(
             'local' => 'scenario_id',
             'foreign' => 'id'));

        $this->hasMany('DecisionPoint as DecisionPoints', array(
             'local' => 'id',
             'foreign' => 'operator_id'));

        $this->hasMany('Tick as Ticks', array(
             'local' => 'id',
             'foreign' => 'operator_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}