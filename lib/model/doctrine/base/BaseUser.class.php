<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $username
 * @property string $password
 * @property string $email
 * @property boolean $is_manager
 * @property boolean $is_admin
 * @property datetime $last_login
 * @property Doctrine_Collection $Operators
 * @property Doctrine_Collection $Scenarios
 * 
 * @method string              getName()       Returns the current record's "name" value
 * @method string              getUsername()   Returns the current record's "username" value
 * @method string              getPassword()   Returns the current record's "password" value
 * @method string              getEmail()      Returns the current record's "email" value
 * @method boolean             getIsManager()  Returns the current record's "is_manager" value
 * @method boolean             getIsAdmin()    Returns the current record's "is_admin" value
 * @method datetime            getLastLogin()  Returns the current record's "last_login" value
 * @method Doctrine_Collection getOperators()  Returns the current record's "Operators" collection
 * @method Doctrine_Collection getScenarios()  Returns the current record's "Scenarios" collection
 * @method User                setName()       Sets the current record's "name" value
 * @method User                setUsername()   Sets the current record's "username" value
 * @method User                setPassword()   Sets the current record's "password" value
 * @method User                setEmail()      Sets the current record's "email" value
 * @method User                setIsManager()  Sets the current record's "is_manager" value
 * @method User                setIsAdmin()    Sets the current record's "is_admin" value
 * @method User                setLastLogin()  Sets the current record's "last_login" value
 * @method User                setOperators()  Sets the current record's "Operators" collection
 * @method User                setScenarios()  Sets the current record's "Scenarios" collection
 * 
 * @package    stimuLearning
 * @subpackage model
 * @author     Artur Melo <adsmelo@ua.pt>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('name', 'string', 150, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 150,
             ));
        $this->hasColumn('username', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'email' => true,
             'length' => 255,
             ));
        $this->hasColumn('is_manager', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_admin', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('last_login', 'datetime', null, array(
             'type' => 'datetime',
             ));

        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Operator as Operators', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Scenario as Scenarios', array(
             'local' => 'id',
             'foreign' => 'responsible_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             'name' => 'deleted',
             'type' => 'boolean',
             ));
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}